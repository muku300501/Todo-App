{"version":3,"sources":["firebase.js","Todo.js","Navbar.js","info.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","todo","input","setInput","Modal","onClose","e","className","value","onChange","event","target","Button","variant","color","type","onClick","collection","doc","id","set","merge","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","delete","Navbar","info","class","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e869e0a3.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCvT_ujZUKBODPRnNDR6SWzE7BiW74SbBQ\",\r\n  authDomain: \"todo-app-cp-f88cd.firebaseapp.com\",\r\n  databaseURL: \"https://todo-app-cp-f88cd.firebaseio.com\",\r\n  projectId: \"todo-app-cp-f88cd\",\r\n  storageBucket: \"todo-app-cp-f88cd.appspot.com\",\r\n  messagingSenderId: \"315882639745\",\r\n  appId: \"1:315882639745:web:6b2645037d7eab45dfd880\",\r\n  measurementId: \"G-DBQY69E0RX\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState } from \"react\";\r\nimport \"./Todo.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport {\r\n  List,\r\n  Button,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Modal,\r\n} from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Todo(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [input, setInput] = useState(props.todo.todo);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const updateTodo = () => {\r\n    // Update the Message with new input text\r\n    db.collection(\"todos\").doc(props.todo.id).set(\r\n      {\r\n        todo: input,\r\n      },\r\n      { merge: true }\r\n    );\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal open={open} onClose={(e) => setOpen(false)}>\r\n        <div className={classes.paper}>\r\n          <form>\r\n            <h4>Edit your message here</h4>\r\n            <input\r\n              className=\"input\"\r\n              value={input}\r\n              onChange={(event) => setInput(event.target.value)}\r\n            />\r\n            <Button\r\n              className=\"cursors\"\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              type=\"sumbit\"\r\n              onClick={updateTodo}\r\n            >\r\n              Update Message\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n      <List className=\"todo__list\">\r\n        <ListItem>\r\n          <ListItemAvatar></ListItemAvatar>\r\n          <ListItemText\r\n            primary={props.todo.todo}\r\n            secondary=\"Message recieved to Xoxoxoxo official group\"\r\n          />\r\n        </ListItem>\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          onClick={(e) => setOpen(true)}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <DeleteForeverIcon\r\n          className=\"edit cursors\"\r\n          onClick={(event) =>\r\n            db.collection(\"todos\").doc(props.todo.id).delete()\r\n          }\r\n        />\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <span className=\"navbar-brand mb-0 h1\">â˜  Xoxoxoxoxoxo Officials</span>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst info = () => {\r\n  return (\r\n    <footer class=\"footer mt-auto py-3 info\">\r\n      <div>\r\n        <span>Made By: Mukund Chamariya</span>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default info;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport firebase from \"firebase\";\nimport db from \"./firebase\";\nimport Todo from \"./Todo\";\nimport Navbar from \"./Navbar\";\nimport \"./Todo.css\";\nimport \"./App.css\";\nimport Info from \"./info\";\n\nfunction App() {\n  // const [state, setState] = useState([]);\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // when the app loads, we need to listen to the database and fetch new todos as they get added/remove\n  // useEffect(function :- this code here...fires when the app.js loads, dependancies :- []);\n  useEffect(() => {\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setTodos(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            todo: doc.data().todo,\n          }))\n        );\n      });\n  }, []);\n\n  const addTodo = (event) => {\n    // this will fire off when we click the button\n    event.preventDefault(); // will stop the REFRESH\n\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(\"\"); // clear up the input after hitting submit\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <form className=\"enterMeassage\">\n        <FormControl>\n          <InputLabel>Enter Message</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </FormControl>\n        <Button\n          className=\"cursors\"\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodo}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Send\n        </Button>\n      </form>\n\n      <ul>\n        {todos.map((todo) => (\n          <Todo key={todo.id} todo={todo} />\n        ))}\n      </ul>\n      <Info></Info>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}